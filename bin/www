#!/usr/bin/env node
/* eslint-disable lodash/prefer-lodash-typecheck */

/**
 * Get port from environment and store in Express.
 */

require('dotenv').config()
var port = process.env.PORT = normalizePort(process.env.PORT || '43812');
var host = process.env.HOST = normalizeHost(process.env.HOST || 'localhost');
process.env.TRUSTPROXY = process.env.TRUSTPROXY || 'loopback';
process.env.UIMODE = process.env.UIMODE || 'light';
process.env.PREFIX = normalizePrefix(process.env.PREFIX || '');

/**
* Module dependencies.
*/

var app = require('../app');
var debug = require('debug')('shelly-admin:server');
var http = require('http');




/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, host);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Normalize a host into a IP, string, or false.
 */

function normalizeHost(val) {
  return val;
}
/**
 * Normalize a URL prefix path into a string.
 */

function normalizePrefix(val) {
  return val;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
